name: Run Tests

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Load environment variables
        run: |
          # Export each variable in .env.test to the GitHub environment
          export $(grep -v '^#' .env.test | xargs -d '\n')
          cat .env.test | grep -v '^#' >> $GITHUB_ENV
          POSTGRES_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT_INTERNAL}/${POSTGRES_DB}?schema=public" >> $GITHUB_ENV

      - name: Start Docker Compose services
        run: docker compose -f ./docker/docker-compose.test.yml --env-file .env.test up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          DB_CONTAINER_ID=$(docker ps -qf "name=cuecards-postgres-test")
          DB_PORT=$(grep 'POSTGRES_PORT_INTERNAL=' .env.test | cut -d '=' -f2)
          echo "Using DB_CONTAINER_ID: $DB_CONTAINER_ID"
          echo "Using DB_PORT: $DB_PORT"
          echo "Using POSTGRES_URL: $POSTGRES_URL"
          echo "Using POSTGRES_USER: $POSTGRES_USER"
          echo "Using POSTGRES_PASSWORD: $POSTGRES_PASSWORD"
          echo "Using NODE_ENV: $NODE_ENV"
          echo "Using POSTGRES_HOST: POSTGRES_HOST"
          echo "Using POSTGRES_PORT_INTERNAL: $POSTGRES_PORT_INTERNAL"
          echo "Using POSTGRES_DB: $POSTGRES_DB"
  
          for i in {1..30}; do
            if [ -n "$DB_CONTAINER_ID" ] && [ "$(docker inspect -f '{{.State.Health.Status}}' $DB_CONTAINER_ID)" == "healthy" ]; then
              echo "PostgreSQL is healthy!"
              break
            else
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            fi
          done

      - name: Prepare the database
        env:
          POSTGRES_URL: ${{ env.POSTGRES_URL }}
          SNAPLET_WORKING_DIRECTORY: prisma/seed
        run: |
          echo "POSTGRES_URL: $POSTGRES_URL"
          npx prisma migrate reset --force --skip-generate
          npx @snaplet/seed sync
          PRISMA_ENV=test npx prisma db seed

      - name: Run tests
        env:
          POSTGRES_URL: ${{ env.POSTGRES_URL }}
        run: npm test

      - name: Stop Docker Compose services
        if: always()
        run: docker compose -f ./docker/docker-compose.test.yml down
